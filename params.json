{
  "name": "chieryw'永不停歇的学习编程",
  "tagline": "chieryw'blog",
  "body": "## 这是我用markdown生成的首页的代码\r\n\r\n\r\n这里会有一些markdown的介绍\r\n![Mou icon](http://25.io/mou/Mou_128.png)\r\n\r\n## Overview\r\n\r\n**Mou**, the missing Markdown editor for *web developers*.\r\n\r\n### Syntax\r\n\r\n#### Strong and Emphasize \r\n\r\n**strong** or __strong__ ( Cmd + B )\r\n\r\n*emphasize* or _emphasize_ ( Cmd + I )\r\n\r\n**Sometimes I want a lot of text to be bold.\r\nLike, seriously, a _LOT_ of text**\r\n\r\n........\r\n这里是它的下载地址[在这里](http://25.io/mou/)\r\n\r\n用起来还是蛮不错的\r\n\r\n---\r\n## UICollectionView简单的实现和调用\r\n\r\n当我们在使用UITableView的时候，常常会抱怨为什么UITableView的实现并不是那么的尽如人意，也就是差不多在设个时候UICollectionView诞生了，不仅仅在每行的可以编辑元素，每列上的性质也得到了提升，每个cell可以具有自己的个性......\r\n\r\n这里有它的[源码地址](https://github.com/chieryw/UICollectionView)\r\n\r\n---\r\n\r\n## CoreMotion简单的实现和调用\r\n\r\n之前关注了Cocoachina，看到上面有一篇文章写的是详解CMDeViceMotion，点进去看了之后被效果图吸引了\r\n\r\n* 向左摇动实现了popViewController的效果\r\n* 横向的摇动实现了presentedViewController的切换\r\n\r\n很帅气的效果\r\n\r\n这里有它的[源码地址](https://github.com/chieryw/CoreMotion)\r\n\r\n---\r\n\r\n## what's new in Xcode\r\n\r\n在这部视屏中我们可以看到以下几种更新\r\n\r\n* swift\r\n\r\n* Live Design\r\n\r\n* Visual Debugging\r\n\r\n* Performance testing \r\n\r\n[详细信息](./WWDC/what'sNewInXcode.html)\r\n[视屏地址](https://developer.apple.com/videos/wwdc/2014/)\r\n\r\n---\r\n\r\n## 重新回到写博客的道路\r\n\r\n再回首恍然如梦，离上次写博客的日期，已经将近有一年了，期间琳琳碎碎有整理的一些资料，也没来的及上传。记忆点也变得少了，是时候回到正常的道路上了。记录下生活中的点滴，成长的道路上还是要有那么一些记忆点来回味我们的人生。\r\n\r\nFIGHTING!!!!!  我又回来了！\r\n\r\n-----\r\n\r\n## [JSPatch 子线程调用卡死问题](./project/jspatch子线程卡死问题.html)\r\n\r\n### 问题描述\r\n\r\n用JSPatch修复了一个主流程模块的事件点击函数，在这个事件中，包含了网络请求（不止一个，连续多个请求）。包上线了之后，成功的解决了线上的Bug。但是，过了一天后，有同学发现在ios7系统下的主模块入口进不去了，正好是上次修复的bug,😱！\r\n\r\n[More](./project/jspatch子线程卡死问题.html)\r\n\r\n------\r\n\r\n## [RSA非对称加密与APP证书签名](./project/rsa非对称加密与app证书签名.html)\r\n\r\n最近看了RSA非对称加密的原理实现，其中阮一峰博客中提到的最为详细（文章末尾已经给出地址）。从实现原理到实际应用，整个流程都做了介绍，相信看完后就可以理解RSA算法的精髓，以及公钥与私钥的分配了。\r\n\r\n看完了之后，突然想到Apple的签名问题（这一问题其实早有文章介绍过了），当你看完了RSA的原理，再去思考苹果的签名，你会发现apple sign也不是那么的神秘。\r\n\r\n下面记录了参考文章，记录自己自己的阅读里程。\r\n\r\n[More](./project/rsa非对称加密与app证书签名.html)\r\n\r\n-----\r\n\r\n## [iterm替代terminal](./project/iterm替代terminal.html)\r\n\r\n最近在推荐的文章中看到了一个有关工具类的推荐，其中有一篇是说的iterm,界面之绚丽,但是就吸引了我的注意。今天实现了相应的效果。\r\n\r\n[More](./project/iterm替代terminal.html)\r\n\r\n-----\r\n\r\n## [ios中锁的对比](./project/ios中各种锁的对比.html)\r\n\r\n为什么要引入锁？这是每个在学习ios锁的同学都会有的疑问。简单来说，ios语言是多线程的，当多个线程操作一个对象，且这个对象的操作要求是有序的时候，就需要的这个对象加锁。\r\n \r\n    eg:\r\n        ios中存在一个数据库\r\n        a/b/c/d业务都会像这个业务中存取数据\r\n        a/b/c/d业务操作是异步的\r\n\r\n[More](./project/ios中各种锁的对比.html)\r\n\r\n------\r\n\r\n## [二叉树](./project/二叉树.html)\r\n\r\n第一次接触这个概念的时间是在大二的时候，时隔多年之后，没想到还是绕回来了，这一次就花点时间记录下二叉树的实现，分析一下可能的用途，产生一个记忆点，并记录起来。真叹息以前大学的时候没能做记录，大把的时间都挥霍于青春！\r\n\r\n[More](./project/二叉树.html)\r\n\r\n------\r\n\r\n## [what new in swift](./project/what\\ new\\ in\\ swift.html)\r\n\r\nSwift 开源已有6个月，开源社区讨论从未停歇过。Swift3 的目标有以下4点：\r\n\r\n\t1、发展开源社区\r\n\t2、新平台的可移植性\r\n\t3、开放更多基础功能\r\n\t4、持续优化\r\n\r\n[More](./project/what\\ new\\ in\\ swift.html)\r\n\r\n-------\r\n\r\n## PromiseKit\r\n\r\n在工程中，我们经常会使用到异步处理。当几个异步处理放在一起的时候，程序的可读性就会变差，同时代码量也会上升。[PromiseKit](https://github.com/mxcl/PromiseKit)很好的解决了这一问题。PromiseKit采用的是链式编程的思想，可读性和代码量上都得到了很好的提升。这里有一篇[博客](http://nathanli.cn/2015/11/15/ios-中的-promise-模式/)很好的介绍了PromiseKit的用法和优势。文中的大量代码都是使用OC来写的，也就是说博客中的介绍大部分还是基于PromiseKit1/2。现在PromiseKit已经出了三个版本了\r\n\r\n\tPromiseKit1\r\n        支持OC\r\n        少量的Swift\r\n    PromiseKit2\r\n        支持OC\r\n        支持Swift\r\n    PromiseKit3\r\n        支持Swift\r\n        针对不同的swift版本请使用不同的Tag\r\n\r\n具体的使用还是要根据你当前的工程是基于哪个版本，以及所使用的语言。\r\n\r\n----\r\n\r\n## ReactiveCocoa\r\n\r\n你的工程现在使用了ReactiveCocoa了吗？ReactiveCocoa作为MVVM模块之间信息交互的担当，现在也是发展飞速。今天又回顾了一下ReactiveCocoa的代码，目前为止只是使用阶段，倒是没有去了解其中的原理，使用上也不是很有底气。所以今天就google了一些原理，千奇百怪的文章比比皆是，真是选花了眼，还是没有找到自己想要的原理篇，直到找到了这样一篇[文章](http://nathanli.cn/2015/08/27/reactivecocoa2-%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/)\r\n\r\n\t文章中没有将所有的原理都一一讲解，主要讲述的还是RACSubscriber 和RACDisposable的原理，举例也是很详细的。\r\n\t从文章中你可以了解到作者在分析ReactiveCocoa原理的思路，授之以渔的行为，文章皆是干货提炼，很是滋补。可以作为研究ReactiveCocoa的思路来读。\r\n\r\n#### ReactiveCocoa使用简单介绍\r\n\r\n一开始接触ReactiveCocoa还是明白这个空间该怎样去写才是王道，除了看github上的文档之外。还是有很多的相关博客是介绍ReactiveCocoa是如何使用的.这里就有一个博客是介绍如何使用的\r\n\r\n* [ReactiveCocoa学习篇——【上】](http://www.jianshu.com/p/53eec1a2ad93)\r\n\r\n* [ReactiveCocoa学习篇——【下】](http://www.jianshu.com/p/05544e4ac972)\r\n\r\n--------\r\n\r\n## [Notification](./project/Notification.html)\r\n\r\n苹果的notification包含了两个类型\r\n\r\n* Local Notification\r\n* Remote Notification\r\n\r\n当接收到推送的时候，我们可以做出相应的提示\r\n\r\n\t一个AlertView提示\r\n\t一个Application icon上的badge\r\n\t一个语音\r\n\t\r\n我们可以将Local Notification 和 Remote Notification当成一种类型来处理，这样对于用户来说是比较容易接受的，毕竟都是推送。但是如果你想定制不同的类型，也是可以的，苹果给出了每个类型对应的API，所以对于单独的定制也是支持的。\r\n\r\n----\r\n\r\n## [Notification传输流程](./project/Notification传输流程.html)\r\n\r\n说到Notification的传输流程，其实是包含了三个部分的，这三个部分也是我们需要了解的Notification的核心内容。\r\n\r\n* Provider-to-APNs Connection Trust\r\n* APNs-to-Device Connection Trust\r\n* Token Generation and Dispersal\r\n\r\n----------\r\n\r\n## Notification 在IOS10上的变化\r\n\r\nios10在notification上的变化还是很大的，notificationCenter中显示的不在是之前仅仅只有一个body，新增了如下几点。\r\n\r\n* title\r\n* subtitle\r\n* attachment(giff,image,video)\r\n\r\n展示的内容更加的丰富。同时在localNotification由原来的只有一种scheduled(时间间隔维度),现在增加到了三种。\r\n\r\n* UNTimeIntervalNotificationTrigger(时间间隔维度)\r\n* UNCalendarNotificationTrigger(日期维度)\r\n* UNLocationNotificationTrigger(地理位置维度)\r\n\r\n同时支持notification展开，自定义展开后的内容。这里看这样一片[文章](http://www.jianshu.com/p/db2f938542e6)就可以了，不在做过多的阐述\r\n\r\n----\r\n\r\n## [locationNotification实践](./project/locationNotification实践.html)\r\n\r\n当你手上拿着锤子的时候，全世界都是钉子。迫不及待的想试验一下新的Notification到底长得什么模样。下载最新的Xcode beta,新建工程，开始用swift语言尝试写工程\r\n\r\n首先向用户申请打开推送请求\r\n\r\n\t// 向用户请求认证信息\r\n    func authorizationNotification() {\r\n        UNUserNotificationCenter.current().requestAuthorization(options: [.alert,.sound,.badge]) { (granted, error) in\r\n            if granted {\r\n                // 用户已经认证了\r\n                self.addNotificationHandleInApplication()\r\n            }\r\n            else {\r\n                // 用户拒绝\r\n                print(\"用户拒绝了\")\r\n            }\r\n        }\r\n    }\r\n\r\n-----",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}